//Making a Auction project with these features

    //Object Details

    //Aution owner

    // participents

    // aution status(has eneded or not)

    //end time

    //start time

    //winner
    
    
    
    
    contract Auction{
    
    address owner; 

    uint public startTime; 

    uint public endTime; 

    bool hasEnded; 

    address payable public highestBidder;

    uint public highestBid;

    address payable public winner; 

mapping (address=>uint) public bidsByParticipants;

    modifier notOwner(){

        require(msg.sender!=owner,"Owner can't be participant");_;

    }

    modifier onlyOwner(){

        require(msg.sender==owner,"You don't have access");_;

    }


    modifier runningAuction(){

        require(!hasEnded,"Auction has been ended");_;

    }


    constructor(){

        owner=msg.sender;

        startTime=block.timestamp;
        
          }

      

    function placeBid() payable public notOwner runningAuction{

      require (highestBid<bidsByParticipants[msg.sender]+msg.value,"You bid is below than the current highest bid.");

        bidsByParticipants[msg.sender]+=msg.value;       

       // bidsByParticipants[msg.sender]=bidsByParticipants[msg.sender]+msg.value;

   

       if (highestBid<bidsByParticipants[msg.sender]){

           highestBid=bidsByParticipants[msg.sender];

           highestBidder=payable(msg.sender);
           

       }

    }
     

    function endAuction() payable public onlyOwner {

        winner=highestBidder;

        hasEnded=true;

        endTime=block.timestamp;


       

        //return everyone's ethers except winner

    }

    function getMyBid() public notOwner view returns (uint){

        return bidsByParticipants[msg.sender];

    }

    function withdrawBid() public  payable  notOwner runningAuction{

        require(msg.sender!=highestBidder,"You can't withdraw the bid");
        
        }
        
        
        }
